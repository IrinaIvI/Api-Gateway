services:
  postgres:
    image: postgres:16
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    # environment:
    #   POSTGRES_DB: test_db
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - app_network

  alembic:
    build:
      context: . # Эта команда запускает миграции
    volumes:
      - .:/app
    environment:
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
    depends_on:
      - postgres  # Убедитесь, что база данных готова перед запуском миграций

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app_network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - app_network

  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/workspace/src/app
      - PORT=8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      #- POSTGRES_URL=postgresql+psycopg2://postgres:password@localhost:5432/test_db
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network

  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      - PORT=8001
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      #- POSTGRES_URL=postgresql+psycopg2://postgres:password@localhost:5432/test_db
    volumes:
      - shared-data:/photos
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network

  transactions:
    build:
      context: ./services/transactions
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/workspace/src/app
      - PORT=8002
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      #- POSTGRES_URL=postgresql+psycopg2://postgres:password@localhost:5432/test_db
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network

  face_verification:
    build:
      context: ./services/face_verification
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/workspace/src/app
      - PORT=8003
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      #- POSTGRES_URL=postgresql+psycopg2://postgres:password@localhost:5432/test_db
    volumes:
      - shared-data:/photos
    depends_on:
      - kafka
      - postgres
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  shared-data:
  app-db-data:
